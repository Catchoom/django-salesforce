Some Salesforce fields can not be fully used without special attributes. You
can see in the output of ``inspectdb`` in the most complete form.

-  **sf_read_only** - Some fields require this special attributes to make the
   model writable. Some fields are completely read only (``READ_ONLY``)
   or insertable only but can not be later updated (``NOT_UPDATEABLE``) or
   updateable only but can not be specified on insert (``NOT_CREATEABLE``).
   Examples of such fields are automatically updated fields "last_modified_by" and
   "last_modified_date" or fields defined by a formula like "name" of contact,
   given by "first_name" and "last_name". Example::

     last_modified_date = models.DateTimeField(sf_read_only=models.READ_ONLY)

-  **Defaulted on create** - Some fields have a dynamic default value unknown
   by Django and assigned by Salesforce if the field is omitted when a new object
   is inserted. This rule will not be used if the value is ``None``.
   Sometimes is ``None`` even not accepted by Salesforce, while the missing
   value is ok. Django-salesforce supports it by a special default value
   ``model.BooleanField(default=models.DEFAULTED_ON_CREATE)``. That means "let
   it to Salesforce". This is useful for all fields marked by attribute
   ``defaultedOnCreate`` in Salesforce. For example the current user of
   Salesforce is assigned to ``owner`` field if no concrete user is  assigned,
   but None would be rejected. All boolean fields have different default values
   according to current ``Checked/Unchecked`` preferences.

-  **Comments # Reference to tables [...]**
   Some builtin foreign keys are references to more tables. The class of first
   table is used in the exported ``ForeignKey`` and all tables are listed in
   the comment. Any of them can be used instead.::

     class AccountHistory(SalesforceModel):
         created_by = models.ForeignKey(User) # Reference to tables [SelfServiceUser, User]

-  **Partial Database Introspection with inspectdb** Tables that are exported into a
   Python model can be restricted by regular expression::

     python manage.py inspectdb --table-filter="Contact$|Account" --database=salesforce

   In this example, inspectdb will only export models for tables with exact
   name ``Contact`` and all tables that are prefixed with ``Account``. This
   filter works with all supported database types.

-  **Verbosity** - This package can set correct column names for Salesforce
   without explicit attribute ``db_column`` for many objects automatically.
   These attributes are not exported if a default verbosity is used. This is
   intended for use only with SFDC. If an alternate non SFDC test database
   is also expected and migrations of any SalesforceModel will be created then
   explicit names in the code are better: ``--verbosity=2``.

-  **Accessing the Salesforce SOAP API** - There are some Salesforce actions that cannot or can hardly
   be implemented using the generic relational database abstraction and the REST API.
   For some of these actions there is an available endpoint in the old Salesforce API
   (SOAP) that can be accessed using our utility module. In order to use that module,
   you will need to install an additional dependency ::

     pip install beatbox    # depends on Python 2.7

   Here is an example of usage with ``Lead`` conversion ::

     from salesforce.utils import convert_lead

     lead = Lead.objects.all()[0]
     response = convert_lead(lead)

   All usual
   `additional parameters <https://developer.salesforce.com/docs/atlas.en-us.api.meta/api/sforce_api_calls_convertlead.htm>`__
   are supported in the original letter case. It allows e.g. merging a Lead
   with an existing Account or Contact and to control much more.

   For the particular case of ``Lead`` conversion, beware that having
   some *custom* and *required* fields in either ``Contact``, ``Account`` or
   ``Opportunity`` can be more complicated. A mapping from custom fields in your
   ``Lead`` to these fields must be defined in the system and these Lead fields
   should not be empty at the time of conversion. Follow the
   `instructions <http://www.python.org/https://help.salesforce.com/apex/HTViewHelpDoc?id=customize_mapleads.htm>`__
   for more details.
